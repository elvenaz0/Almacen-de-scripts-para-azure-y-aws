#!/bin/bash
# Script de respaldo autom√°tico con Git
# Este script clona el repositorio en el branch especificado, realiza commit y push con respaldo autom√°tico.

set -euo pipefail
# Descomenta la siguiente l√≠nea para ver el detalle de la ejecuci√≥n:
# set -x

# Verificar que Git est√© instalado
if ! command -v git >/dev/null 2>&1; then
    echo "‚ùå Error: Git no est√° instalado. Por favor, inst√°lalo y vuelve a intentarlo."
    exit 1
fi

echo "-----------------------------------------"
echo "Iniciando backup autom√°tico a las: $(date)"
echo "Directorio actual: $(pwd)"
echo "-----------------------------------------"

# Configuraci√≥n: URL del repositorio remoto y branch a usar
REPO_URL="https://github.com/elvenaz0/Almacen-de-scripts-para-azure-y-aws.git"
BRANCH="master"  # Cambia este valor por el branch que desees clonar y usar

# Obtener la fecha y hora actuales de forma din√°mica
FECHA=$(date '+%Y-%m-%d %H:%M:%S')
MENSAJE="Backup autom√°tico - $FECHA"

echo "üìÖ Fecha y hora actuales: $FECHA"
echo "üåø Branch seleccionado: $BRANCH"

# Verificar si el directorio actual es un repositorio Git
if [ ! -d ".git" ]; then
    echo "‚ùå No se encontr√≥ un repositorio Git en este directorio."
    # Si el directorio 'repo_temp' ya existe, se ingresa en √©l; de lo contrario, se clona el repositorio
    if [ -d "repo_temp" ]; then
        echo "üìÇ El directorio 'repo_temp' ya existe. Entrando en 'repo_temp'..."
        cd repo_temp || { echo "‚ö†Ô∏è Error: No se pudo acceder al directorio 'repo_temp'."; exit 1; }
    else
        echo "‚è¨ Clonando el repositorio en el branch '$BRANCH' desde $REPO_URL en el directorio 'repo_temp'..."
        git clone --branch "$BRANCH" "$REPO_URL" repo_temp || { echo "‚ö†Ô∏è Error: Clonaci√≥n del repositorio fall√≥."; exit 1; }
        cd repo_temp || { echo "‚ö†Ô∏è Error: No se pudo acceder al directorio clonado 'repo_temp'."; exit 1; }
    fi
else
    echo "üîç Se detect√≥ un repositorio Git en el directorio actual."
fi

# Cambiar a la rama especificada (en caso de que no se haya clonado con el branch deseado)
echo "üîÑ Cambiando a la rama '$BRANCH'..."
if git checkout "$BRANCH"; then
    echo "‚úÖ Cambio a la rama '$BRANCH' completado."
else
    echo "‚ö†Ô∏è Error: Fall√≥ el cambio a la rama '$BRANCH'."
    exit 1
fi

# Actualizar el repositorio para obtener los √∫ltimos cambios
echo "‚è´ Actualizando el repositorio (git pull)..."
if git pull origin "$BRANCH"; then
    echo "‚úÖ Repositorio actualizado."
else
    echo "‚ö†Ô∏è Error: No se pudieron traer los cambios del repositorio remoto."
    exit 1
fi

# Agregar todos los archivos nuevos y modificados
echo "‚ûï Agregando archivos (git add)..."
git add -A

# Realizar commit con el mensaje que incluye la fecha y hora actual
echo "üí¨ Realizando commit con mensaje: \"$MENSAJE\""
if git commit -m "$MENSAJE"; then
    echo "‚úÖ Commit realizado correctamente."
else
    echo "‚ö†Ô∏è Advertencia: No se realizaron cambios o el commit fall√≥."
fi

# Enviar los cambios al repositorio remoto
echo "üöÄ Realizando push a la rama '$BRANCH'..."
if git push origin "$BRANCH"; then
    echo "‚úÖ Push realizado con √©xito."
else
    echo "‚ö†Ô∏è Error: El push a '$BRANCH' fall√≥."
    exit 1
fi

echo "-----------------------------------------"
echo "‚úÖ Backup completado con √©xito a las: $(date)"
echo "-----------------------------------------"

# Pausa para permitir visualizar la salida (√∫til si se ejecuta haciendo doble clic)
read -p "Presione Enter para finalizar..."
